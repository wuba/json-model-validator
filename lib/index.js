"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ArrayValidator=exports.JSONMember=exports.JSONModel=exports.FIELD_TYPE=void 0,require("reflect-metadata");class ValidationError extends Error{constructor(e,t){super(e),this.name="ValidationError",this.list=t||[]}}const ArrayMember=e=>{class t{}return Reflect.defineMetadata("isArrayMember",!0,t),Reflect.defineMetadata("member",e,t),t};exports.FIELD_TYPE={ANY:"any",ARRAY:ArrayMember,STRING:String,NUMBER:Number,BOOLEAN:Boolean};const JSONModel=e=>{Reflect.defineMetadata("toBeValidate",!0,e)};exports.JSONModel=JSONModel;const JSONMember=(d,i)=>(e,t)=>{let r=d;var a=`${t}_formatter`;!0===Reflect.getMetadata("isArrayMember",d)&&(r=Array,o=Reflect.getMetadata("member",d),Reflect.defineMetadata(`${t}_array_type`,o,e.constructor));var o=Reflect.getMetadata("keys",e.constructor)||[];Reflect.defineMetadata("keys",[...o,t],e.constructor),Reflect.defineMetadata(Symbol.for(t),r,e.constructor),Reflect.defineMetadata(a,i,e.constructor)};exports.JSONMember=JSONMember;const handler=(l,n,s)=>({set(e,t,r){var a=Reflect.getMetadata(Symbol.for(t),l);const o=Reflect.getMetadata(`${t}_formatter`,l);if(void 0===r&&void 0!==o)try{r=o(r)}catch(e){throw new ValidationError(`自定义默认值处理函数 ${o.toString()} 执行失败`)}var d,i=Object.prototype.toString.call(r).slice(8,-1);return"Array"===a.name?(d=Reflect.getMetadata(`${t}_array_type`,l),e[t]=exports.ArrayValidator(d,r,s,n)):i!==a.name?n.push(`${t} 应为 ${a.name} 类型`):Reflect.set(e,t,r),!0}}),JSONValidator=(e,t,r=void 0,a=["data"],o=[])=>{"object"!=typeof t&&o.push(`待检查的数据 ${a.join(".")} 应为 ${e.name} 对象，当前值为 ${t}`);const d=Reflect.getMetadata("keys",e);if(void 0===r&&(r=new Proxy({},handler(e,o,a))),d.map(e=>r[e]=t[e]),0<o.length)throw new ValidationError("JSON校验未通过",o);return r},ArrayValidator=(t,e,r=["data"],a=[])=>{return e.map(e=>validator(t,e,r,a,void 0))};exports.ArrayValidator=ArrayValidator;const validator=(e,t,r,a,o)=>"object"==typeof t?Reflect.getMetadata("toBeValidate",e)?JSONValidator(e,t,void 0,r,a):t:baseTypeValidator(e,t,r,a,o),baseTypeValidator=(e,t,r,a,o=void 0)=>{if((typeof t).toLowerCase()===e.name.toLowerCase())return t;if(o)try{return o(t)}catch(e){throw new ValidationError(`自定义默认值处理函数 ${o.toString()} 执行失败`)}return a.push(`参数 ${r.join(".")}.${t} 应为 ${e.name} `),!1};exports.default=JSONValidator;